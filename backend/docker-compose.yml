version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: jewelry_auction_sqlserver
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: Aa@123456
      TZ: Asia/Ho_Chi_Minh
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - jewelry_network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Aa@123456 -Q 'SELECT 1'"]
      timeout: 20s
      retries: 10

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: jewelry_auction_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jewelry_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Application
  app:
    build: .
    container_name: jewelry_auction_app
    environment:
      - APP_ENV=production
      - DB_URL=mssql+pyodbc://sa:Aa%40123456@sqlserver:1433/jewelry_auction_dev?driver=ODBC+Driver+17+for+SQL+Server
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-change-this
      - JWT_SECRET=your-jwt-secret-key-change-this
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jewelry_network
    restart: unless-stopped

  # Nginx (reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: jewelry_auction_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./uploads:/var/www/uploads
    depends_on:
      - app
    networks:
      - jewelry_network
    restart: unless-stopped

volumes:
  sqlserver_data:
  redis_data:

networks:
  jewelry_network:
    driver: bridge
